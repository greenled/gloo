#! /bin/sh
### BEGIN INIT INFO
# Provides:          pegotesd
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Script de inicio para Pegotes
# Description:       Este script debería ser utilizado para iniciar/detener/reiniciar el daemon de Pegotes
### END INIT INFO

# Author: Juan Carlos Mejías Rodríguez <juan.mejias@reduc.edu.cu>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
APP=/usr/share/Pegotes-1.0-SNAPSHOT
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Daemon de Pegotes"
NAME=pegotes
DAEMON_NAME=pegotesd
#DAEMON=/usr/bin/$NAME
DAEMON=$APP/bin/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$DAEMON_NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	start-stop-daemon --status --pidfile $PIDFILE --name 'java'
	case "$?" in
		0)
			echo "Pegotes is already running"
			return 1
			;;
		1)
			echo "Pegotes is not runnig but PID file exists at $PIDFILE. Remove it and try again."
			return 2
			;;
		3)
			echo "Starting Pegotes"
			start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- -Dpidfile.path=$PIDFILE || return 2
			;;
		4)
			echo "Somethig strange is happening to Pegotes"
			return 2
			;;
	esac

	#start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null || return 1
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- || return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name 'java'
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --name 'java'
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name 'java'
	return 0
}

do_status() {
	# Return
	#   0 if daemon is running
	#   1 if daemon is not running but PID file exists
	#   3 if daemon is not running
	#   4 if cannot determine the daemons status

	start-stop-daemon --status --pidfile $PIDFILE --name 'java' && return 0 || return $?
}

case "$1" in
  start)
	log_daemon_msg "Starting $NAME"
	do_start > /dev/null &
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  status)
	#status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	do_status
	case "$?" in
		0) log_daemon_msg "Pegotes is running" ;;
		1) log_daemon_msg "Pegotes is not runnig but PID file exists at $PIDFILE" ;;
		3) log_daemon_msg "Pegotes is not running" ;;
		4) log_daemon_msg "Somethig strange is happening to Pegotes" ;;
	esac
	exit 0
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start > /dev/null &
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
